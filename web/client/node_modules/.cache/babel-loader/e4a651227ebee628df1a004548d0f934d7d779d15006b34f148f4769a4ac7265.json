{"ast":null,"code":"class GalaxiesService {\n  getGalaxies() {\n    return fetch(process.env.REACT_APP_GALAXIES_API_URL, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to fetch galaxies`);\n      }\n      return res.json();\n    }).catch(err => {\n      console.error(err);\n      throw err;\n    });\n  }\n  getGalaxyById(galaxyId) {\n    return fetch(`${process.env.REACT_APP_GALAXIES_API_URL}/${galaxyId}`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to fetch galaxy ${galaxyId}`);\n      }\n      return res.json();\n    }).catch(err => {\n      console.error(err);\n      throw err;\n    });\n  }\n  createGalaxy(payload) {\n    return fetch(process.env.REACT_APP_GALAXIES_API_URL, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to create galaxy');\n      }\n      return res.json();\n    }).catch(err => {\n      console.error(err);\n      throw err;\n    });\n  }\n}\nexport default new GalaxiesService();","map":{"version":3,"names":["GalaxiesService","getGalaxies","fetch","process","env","REACT_APP_GALAXIES_API_URL","method","mode","headers","then","res","ok","Error","json","catch","err","console","error","getGalaxyById","galaxyId","createGalaxy","payload","body","JSON","stringify"],"sources":["/Users/gtrekter/Repositories/Vastaya/web/client/src/services/GalaxiesService.js"],"sourcesContent":["class GalaxiesService {    \n    getGalaxies(){\n        return fetch(process.env.REACT_APP_GALAXIES_API_URL,{ \n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => {\n            if (!res.ok) {\n                throw new Error(`Failed to fetch galaxies`);\n            }\n            return res.json();\n        })\n        .catch(err => {\n            console.error(err);\n            throw err;\n        });\n    }\n    getGalaxyById(galaxyId){\n        return fetch(`${process.env.REACT_APP_GALAXIES_API_URL}/${galaxyId}`,{\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => {\n            if (!res.ok) {\n                throw new Error(`Failed to fetch galaxy ${galaxyId}`);\n            }\n            return res.json();\n        })\n        .catch(err => {\n            console.error(err);\n            throw err;\n        });\n    }\n    createGalaxy(payload){\n        return fetch(process.env.REACT_APP_GALAXIES_API_URL,{\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        })\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Failed to create galaxy');\n            }\n            return res.json();\n        })\n        .catch(err => {\n            console.error(err);\n            throw err;\n        });\n    }\n}\nexport default new GalaxiesService();\n"],"mappings":"AAAA,MAAMA,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAE;IACT,OAAOC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAC;MAChDC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACL,QAAQ,EAAE,mCAAmC;QAC7C,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAI;MACT,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,MAAMA,GAAG;IACb,CAAC,CAAC;EACN;EACAG,aAAaA,CAACC,QAAQ,EAAC;IACnB,OAAOjB,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAIc,QAAQ,EAAE,EAAC;MACjEb,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACL,QAAQ,EAAE,mCAAmC;QAC7C,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAI;MACT,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,0BAA0BO,QAAQ,EAAE,CAAC;MACzD;MACA,OAAOT,GAAG,CAACG,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,MAAMA,GAAG;IACb,CAAC,CAAC;EACN;EACAK,YAAYA,CAACC,OAAO,EAAC;IACjB,OAAOnB,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAC;MAChDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;QACL,QAAQ,EAAE,mCAAmC;QAC7C,cAAc,EAAE;MACpB,CAAC;MACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,OAAO;IAChC,CAAC,CAAC,CACDZ,IAAI,CAACC,GAAG,IAAI;MACT,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC9C;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,MAAMA,GAAG;IACb,CAAC,CAAC;EACN;AACJ;AACA,eAAe,IAAIf,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}